{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","useState","listOfTodos","setListOfTodos","statusOfTodo","setStatusOfTodo","preparedTodos","todosFilteredByTitle","filter","title","toLowerCase","includes","completed","preparingTodos","className","type","value","onChange","event","target","map","userId","id","classnames","readOnly","onClick","API_URL","getUser","a","fetch","response","json","getTodos","CurrentUser","user","setUser","getUserFromServer","userFromServer","useEffect","name","email","phone","App","setTodos","setSelectedUserId","getTodosFromServer","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9aec21fd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (id: number) => void;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [listOfTodos, setListOfTodos] = useState('');\n  const [statusOfTodo, setStatusOfTodo] = useState('all');\n\n  const filterTodosByTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setListOfTodos(event.target.value);\n  };\n\n  const changeStatusOfTodo = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatusOfTodo(event.target.value);\n  };\n\n  const preparingTodos = () => {\n    const todosFilteredByTitle = todos.filter(({ title }) => {\n      const titleInLowerCase = title.toLowerCase();\n\n      return titleInLowerCase.includes(listOfTodos.toLowerCase());\n    });\n\n    switch (statusOfTodo) {\n      case 'active (not completed)':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => !completed,\n        );\n\n      case 'completed':\n        return todosFilteredByTitle.filter(\n          ({ completed }) => completed,\n        );\n\n      default:\n        return todosFilteredByTitle;\n    }\n  };\n\n  const preparedTodos = preparingTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__navigation\">\n        <h2>\n          Todos:\n        </h2>\n        <h3>\n          Filter todo by title:\n        </h3>\n        <label>\n          <input\n            type=\"text\"\n            className=\"TodoList__navigationInput\"\n            value={listOfTodos}\n            onChange={filterTodosByTitle}\n            data-cy=\"filterByTitle\"\n          />\n        </label>\n\n        <h3>\n          Select todo status:\n        </h3>\n        <select\n          value={statusOfTodo}\n          onChange={changeStatusOfTodo}\n        >\n          <option>all</option>\n          <option>active (not completed)</option>\n          <option>completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {preparedTodos.map(({\n            userId,\n            id,\n            title,\n            completed,\n          }) => (\n            <li\n              className={classnames(\n                'TodoList__item',\n                { 'TodoList__item--checked': completed },\n                { 'TodoList__item--unchecked': !completed },\n              )}\n              key={id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{title}</p>\n              </label>\n\n              <button\n                type=\"button\"\n                className={classnames(\n                  'button',\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                    selectedUserId === userId,\n                  },\n                )}\n                onClick={() => selectUser(userId)}\n                data-cy=\"userButton\"\n              >\n                {`User ${userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}users/${userId}`);\n\n  return response.json();\n};\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}todos`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  userId: number;\n  selectUser: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const [\n    user,\n    setUser,\n  ] = useState<User | null>(null);\n\n  const getUserFromServer = async () => {\n    const userFromServer = await getUser(userId);\n\n    setUser(userFromServer);\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, [userId]);\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n\n          <h3\n            className=\"CurrentUser__name\"\n            data-cy=\"userName\"\n          >\n            {user.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clearButton\"\n            onClick={() => selectUser(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [\n    todos,\n    setTodos,\n  ] = useState<Todo[]>([]);\n\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectUser={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}